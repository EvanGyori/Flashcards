
What is a vulkan instance
#
A vulkan object that allows your application
to interact with the vulkan api
#

What is an extension
#
A vulkan feature that needs to be enabled
#

What is an instance extension
#
A vulkan feature for the instance
that exists for the whole application
#

What is a global extension
#
A vulkan feature for the instance
that exists for the whole application
#

What are validation layers
#
components or bits of code that hook onto
vulkan functions for debugging
#

Describe and setup application info struct
#
VkApplicationInfo appInfo{};
appInfo.sType = VK_STRUCTURE_TYPE_APPLICATION_INFO;
appInfo.pNext = nullptr;
appInfo.pApplicationName = "app name";
appInfo.applicationVersion = VK_MAKE_VERSION(1, 0, 0);
appInfo.pEngineName = nullptr;
appInfo.engineVersion = 0;
appInfo.apiVersion = VK_API_VERSION_1_0;
#

version macro
#
VK_MAKE_VERSION(major, minor, patch);
#

Describe and setup instance create info struct
#
VkInstanceCreateInfo createInfo{};
createInfo.sType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;
createInfo.pNext = nullptr;
TODO: createInfo.flags;
createInfo.pApplicationInfo;
createInfo.enabledLayerCount;
createInfo.ppEnabledLayerNames;
createInfo.enabledExtensionCount;
createInfo.ppEnabledExtensionNames;
#

Get instance extensions to use glfw
#
uint32_t glfwExtensionCount = 0;
const char** glfwExtensions = glfwGetRequiredInstanceExtensions(&glfwExtensionCount);
#

Name of general purpose validation layer
#
VK_LAYER_KHRONOS_validation
#

Get supported instance layers
#
vkEnumerateInstanceLayerProperties(&count, &array);
#

Get supported instance extensions
#
vkEnumerateInstanceExtensionProperties(&filter, &count, &array);
#

Describe and create vulkan instance then handle cleanup
#
Create application info
Create instance create info and fill with extensions and layers
check if extensions and layers are supported
only enable layers in debug mode
create instance
#

Create debug messenger callback function
#
Add instance extension VK_EXT_DEBUG_UTILS_EXTENSION_NAME

// if you return VK_TRUE, the vulkan function wont continue,
// otherwise it will
static VKAPI_ATTR VkBool32 VKAPI_CALL debugCallback(
	VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity,
	VkDebugUtilsMessageTypeFlagsEXT messageType,
	VkDebugUtilsMessengerCallbackDataEXT const* callbackData,
	void* userData)
{
	// Displays only warning and error messages
	if (messageSeverity >= VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT) {
		
		std::string type;
		switch (messageType) {
			case VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT:
				type = "general";
				break;
			case VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT:
				type = "validation";
				break;
			case VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT:
				type = "performance";
				break;
		}
		
		std::cout << "type: " << type << ", message: " << callbackData->pMessage << '\n';
	}
	
	return VK_FALSE;
}
#

all debug message severity enumerations and the variable type
#
the type is VkDebugUtilsMessageSeverityFlagBitsEXT

VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT
	diagnostic message
VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT
	informational message
VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT
	warning message, not a error
VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT
	may caush a crash
#

all debug message type enumerations and the variable type
#
the type is VkDebugUtilsMessageTypeFlagsEXT

not specific to specification or performance
VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT

specification issue
VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT

performance issue
VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT

#

Add debug utilities extension
#
VK_EXT_DEBUG_UTILS_EXTENSION_NAME
#

debug callback data variable and all member variables
#
the type is VkDebugUtilsMessengerCallbackData

// cstring message
pMessage

// array of related objects
pObjects

// number of objects in pObjects
objectCount
#

Create Debug messenger
#
Add handler variable VkDebugUtilsMessengerEXT
Add appropiate extension
Create debug message callback function
Create the create info
specify what severity and type messages are received
Pass in user data
Create proxy function and use it
#

Create proxy function for extension function: vkCreateDebugUtilsMessengerEXT
#
VkResult proxyCreateDebugUtilsMessengerEXT(VkInstance instance,
	VkDebugUtilsMessengerCreateInfoEXT const* createInfo,
	VkAllocationCallbacks const* allocator,
	VkDebugUtilsMessengerEXT* debugMessenger)
{
	auto func = (PFN_vkCreateDebugUtilsMessengerEXT) vkGetInstanceProcAddr(instance, "vkCreateDebugUtilsMessengerEXT");
	
	if (func != nullptr) {
		return func(instance, createInfo, allocator, debugMessenger);
	} else {
		return VK_ERROR_EXTENSION_NOT_PRESENT;
	}
}
#

cleanup debug messenger
#
create proxy function:
void proxyDestroyDebugUtilsMessengerEXT(
	VkInstance instance,
	VkDebugUtilsMessengerEXT handler,
	VkAllocationCallbacks const* allocator)
{
	auto func = (PFN_vkDestroyDebugUtilsMessengerEXT)
		vkGetInstanceProcAddr(instance, 
		"vkDestroyDebugUtilsMessengerEXT");
	if (func != nullptr)
		func(instance, handler, allocator);
}

in cleanup:
if (validation layers are enabled)
	proxyDestroyDebugUtilsMessengerEXT(instance, handler);
#

Get address of extension function and store in variable
#
void* funcAddr = vkGetInstanceProcAddr(instance, extFuncName);
auto func = (PFN_extFuncName)funcAddr;
#















